#!/bin/bash

# For configuration
export REBUILD=0

# For .deb packages
export DEBFULLNAME='Nublic Packaging Team'
export DEBEMAIL='packaging@nublic.com'
export DEBKEY=4EEA5986
export DEBREVISION=`date +%F-%H-%M`
export INITIAL_TIME=`date +%s`

# Used directories
export INITIAL_DIR=`pwd`
export TARGET_DIR="${INITIAL_DIR}/target"
export REPO_DIR="${TARGET_DIR}/repo"
export MAVEN_REPO_DIR="${TARGET_DIR}/temp/maven"
export MAVEN_CONFIG_FILE="${INITIAL_DIR}/conf/maven/settings.xml"
export MAVEN="mvn --settings \"${MAVEN_CONFIG_FILE}\" -Dmaven.test.skip"
export MAVEN_SYS="mvn -Dmaven.test.skip"
export DEBUILD="debuild -d -eMAVEN -eMAVEN_REPO_DIR -eMAVEN_OPTS"
export MAVEN_OPTS="-XX:PermSize=1024m -XX:MaxPermSize=1024m"

# Make sure you have libdbus-java maven2 and reprepro installed
# You need to install maven3!! It's not in the repository and needs to be manually installed
# sudo apt-get install libdbus-java maven2 reprepro dpkg-sig libterm-readkey-perl cdbs python-all python-setuptools libtag1-dev ffmpeg libboost1.42-dev zlib1g-dev scala dpkg-sig reprepro devscripts openjdk-7-jdk junit junit4 python-sphinx
# sudo update-java-alternatives -s java-1.7.0-\*

# Make sure you have libdbus-java maven2 and reprepro installed
# You need to install maven3!! It's not in the repository and needs to be manually installed
# sudo apt-get install libdbus-java maven2 reprepro dpkg-sig libterm-readkey-perl cdbs python-all python-setuptools libtag1-dev ffmpeg libboost1.42-dev zlib1g-dev scala dpkg-sig reprepro devscripts openjdk-7-jdk junit junit4 python-sphinx python-support
# sudo update-java-alternatives -s java-1.7.0-\*


#####################################################
# Development environment

install_vagrant() {
    wget http://files.vagrantup.com/packages/476b19a9e5f499b5d0b9d4aba5c0b16ebe434311/vagrant_x86_64.deb
    sudo dpkg -i vagrant_x86_64.deb
}

install_vm() {
    vagrant box add precise32 http://files.vagrantup.com/precise32.box
}

install_devel_packages() {
    sudo apt-get install python-elixir python-coverage python-nose python-mock

}

#####################################################
# Config options
export SHOULD_CLEAN_MAVEN=1 # 1 for running 'maven clean'

last_mod_file() { # 1 -> Directory to get file
    find $1 -not -type d -not -iname '.*' -printf "%T@ %p\n" | sort -n | tail -1 | cut -d ' ' -f 2
}

get_timestamp() { # 1 file
    stat -c %Y $1
}

check_if_file_newer() { # 1 package, 2 timestamp
    local PACK=`get_timestamp $1`
    test ${PACK} -gt $2
}

get_newer_deb() { # 1 deb name
    ls -t ${TARGET_DIR}'/'$1_*.deb | head -n 1
}

at_least_one_deb() {
    ls -t ${TARGET_DIR}'/'$1_*.deb > /dev/null
}

is_built() { # 1 package_name, 2 directory
    if test ${REBUILD} -ne 0 ; then
        return 1
    fi
    if at_least_one_deb $1; then
        local FILE=`last_mod_file $2`
        local DATE=`get_timestamp ${FILE}`
        # echo `get_newer_deb $1` ${DATE}
        check_if_file_newer `get_newer_deb $1` ${DATE}
        return $?
    else
        return 1
    fi
}

install_in_maven_repo() {
    ${MAVEN} install:install-file -Dfile=$1 -DgroupId=$2 \
        -DartifactId=$3 -Dversion=$4 -Dpackaging=jar
}

clean_repo_dir() {
    rm -rf "${REPO_DIR}"
    # Create build folders, if non existant
    mkdir -p "${TARGET_DIR}"
    mkdir -p "${REPO_DIR}"
    mkdir -p "${MAVEN_REPO_DIR}"
}

clean_builds() {
    # Delete previous builds
    rm -rf "${TARGET_DIR}"/*.{deb,build,changes}
}

clean() {
    clean_repo_dir
    clean_builds
}

initialize() {
    # Install libraries in maven repo
    # install_in_maven_repo /usr/share/java/dbus.jar org.freedesktop dbus 2.8.1
    # install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/jEN/json_simple-1.1.jar" jEN json-simple 1.1
    # install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/jEN/jEN.jar" jEN jEN 4.x.o
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-dnd/gwt-dnd-3.1.2-2.jar" com.allen_sauer gwt-dnd 3.1.2-2
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-slider/gwt-slider-bar-1.0.jar" gwt-incubator gwt-slider-bar 1.0
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-comet/gwt-comet-1.2.3.jar" gwt-comet gwt-comet 1.2.3
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwtmobile/gwtmobile-1.1.jar" gwtmobile gwtmobile 1.1
    # Install key into user keychain
    gpg --import conf/keys/packaging.key
    gpg --import conf/keys/packaging.private.key
}

install_in_system_repo() {
    ${MAVEN_SYS} install:install-file -Dfile=$1 -DgroupId=$2 \
        -DartifactId=$3 -Dversion=$4 -Dpackaging=jar
}

package_and_sysinstall_dev_mode() {
    echo
    echo "PACKAGING AND INSTALLING IN MAVEN " $1
    cd "$1"
    ${MAVEN_SYS} -Pdev-mode clean
    ${MAVEN_SYS} -Pdev-mode install
    cd "${INITIAL_DIR}"
}

initialize_system() {
    # install_in_system_repo /usr/share/java/dbus.jar org.freedesktop dbus 2.8.1
    # install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/jEN/json_simple-1.1.jar" jEN json-simple 1.1
    # install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/jEN/jEN.jar" jEN jEN 4.x.o
    install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/gwt-dnd/gwt-dnd-3.1.2-2.jar" com.allen_sauer gwt-dnd 3.1.2-2
    install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/gwt-slider/gwt-slider-bar-1.0.jar" gwt-incubator gwt-slider-bar 1.0
    install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/gwt-comet/gwt-comet-1.2.3.jar" gwt-comet gwt-comet 1.2.3
    install_in_system_repo "${INITIAL_DIR}/3rd-party-libs/gwtmobile/gwtmobile-1.1.jar" gwtmobile gwtmobile 1.1
    package_and_sysinstall_dev_mode player
}

copy_and_touch() {
    echo
    echo "COPYING DEBS FROM " $1
    sleep 1
    cd "$1"
    for f in *.deb
    do
        cp $f "${TARGET_DIR}"
        touch "${TARGET_DIR}/$f"
    done
    cd "${INITIAL_DIR}"
}

package_and_install() {
    echo
    echo "PACKAGING AND INSTALLING IN MAVEN " $1
    cd "$1"
    ${MAVEN} clean
    ${MAVEN} install
    cd "${INITIAL_DIR}"
}

package_and_install_dev_mode() {
    echo
    echo "PACKAGING AND INSTALLING IN MAVEN " $1
    cd "$1"
    ${MAVEN} -Pdev-mode clean
    ${MAVEN} -Pdev-mode install
    cd "${INITIAL_DIR}"
}

build_gwt_package() {
    echo
    echo "BUILDING GWT PACKAGE $2"
    echo "    FOR $1"
    if is_built $2 $1; then
        echo "No changes in files since deb package was compiled. Skipping compilation!"
        return 0
    else
        echo "GWT pakckage would be compiled"
    fi
    cd "$1"
    # Try to run Maven clean
    if [ ${SHOULD_CLEAN_MAVEN} -eq 1 ]
    then
        ${MAVEN} clean
    fi
    cd "${INITIAL_DIR}"
    # Now build the package
    build_deb_package $1 $2
}

build_deb_package() {  # $1 = directory, $2 = package_name
    echo
    echo "BUILDING DEB PACKAGE $2"
    echo "    FOR $1"
    if is_built $2 $1; then
        echo "No changes in files since deb package was compiled. Skipping compilation!"
        return 0
    else
        echo "It will be compiled"
    fi
    cd "$1"
    # Add changelog entry
    dch -p -v ${DEBREVISION} Building on `date`
    ${DEBUILD} -i -us -uc -b
    exit=$?
    git checkout debian/changelog
    if [ $exit -ne 0 ]
    then
        dch -p -v ${DEBREVISION} Building on `date`
        ${DEBUILD} -i -us -uc -b
        exit=$?
        git checkout debian/changelog
        if [ $exit -ne 0 ]
        then
            echo "Error building package " $1
            exit 1
        fi
    fi
    ${DEBUILD} clean
    cd ..
    touch *.deb *.build *.changes
    mv *.deb *.build *.changes "${TARGET_DIR}"
    cd "${INITIAL_DIR}"
}

build_submodule_lib() {
    echo
    echo "BUILDING EXTERNAL LIBRARY " $1
    cd 3rd-party-libs
    rm -rf "$1/debian"
    mkdir "$1/debian"
    cp -R "$1-debian"/* "$1/debian"
    cd "$1"
    ${DEBUILD} -i -us -uc -b
    exit=$?
    if [ $exit != 0 ]
    then
        echo "Error building submodule " $1
        exit 1
    fi
    ${DEBUILD} clean
    cd ..
    mv *.deb *.build *.changes *.dsc *.tar.gz "${TARGET_DIR}"
    rm -rf "$1/debian"
    cd "${INITIAL_DIR}"
}

create_repo() {
    echo
    echo "CREATING REPOSITORY"
    # Create repo structure
    mkdir -p "${REPO_DIR}/conf"
    mkdir -p "${REPO_DIR}/incoming"
    cp conf/repo/conf/distributions "${REPO_DIR}/conf"
    cd "${TARGET_DIR}"
    # Sign packages and add packages to repo
    for pkg in *.deb
    do
        DEB_DATE=`date -r ${pkg} +%s`
        if [ ${DEB_DATE} -gt ${INITIAL_TIME} ]
        then
            dpkg-sig -k ${DEBKEY} --verbose --sign builder $pkg
            #reprepro --ignore=wrongdistribution -Vb repo listmatched precise `echo $pkg | sed -e 's|_.*.deb||g'`
            reprepro --ignore=wrongdistribution -Vb repo removematched precise `echo $pkg | sed -e 's|_.*.deb||g'`
            reprepro --ignore=wrongdistribution -Vb repo includedeb precise $pkg
        fi
    done
    cd "${INITIAL_DIR}"
}

in_list() {
    for i in $2
    do
        if [ $1 = $i ]
        then
            return 0
        fi
    done
    return 1
}


do_build() {
    for thing in $@
    do
        # Clean repo dir
        if in_list $thing "clean clean_repo_dir"
        then
            clean_repo_dir
        fi
        # Clean build
        if in_list $thing "clean clean_builds"
        then
            clean_builds
        fi

        # Initialize build
        if in_list $thing "all initialize"
        then
            initialize
        fi

        if in_list $thing "all 3rd_party"
        then
            # Update submodule repositories
            git submodule update --init --merge
            git submodule foreach 'git pull origin master'

            # Third-party libraries
            cp ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen-Makefile ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/Makefile
            build_submodule_lib echoprint-codegen
            rm ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/Makefile ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/echoprint-codegen ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/src/libcodegen.so.4.1.1
            build_submodule_lib sunburnt
            build_submodule_lib pyechonest
            rm -r ${INITIAL_DIR}/3rd-party-libs/pyechonest/pyechonest.egg-info/
            copy_and_touch 3rd-party-libs/aria2
            copy_and_touch 3rd-party-libs/python-fstab
            # Some libraries of tomcat7 are required by jetty8 so we cannot get rid of it
            copy_and_touch 3rd-party-libs/tomcat7
            copy_and_touch 3rd-party-libs/jetty8
            copy_and_touch 3rd-party-libs/lucene-solr
            build_deb_package 3rd-party-libs/pykka pykka
            build_deb_package 3rd-party-libs/rpcbd-0.6.0 rpcbd
            rm -r ${INITIAL_DIR}/3rd-party-libs/rpcbd-0.6.0/rpcbd.egg-info/
            build_deb_package 3rd-party-libs/flask-sqlalchemy flask_sqlalchemy
            build_deb_package 3rd-party-libs/python-video-converter python-video-converter
            # build_deb_package 3rd-party-libs/guava
        fi

        # bst-player fork
        if in_list $thing "all gwt bst_player"
        then
            package_and_install_dev_mode player
        fi

        if in_list $thing "all fast base base_python"
        then
            # Base modules
            build_deb_package resource/main/src nublic-resource
            build_deb_package notification/main/src nublic-notification
            build_deb_package files_and_users/main/src nublic-files-and-users
            build_deb_package files_and_users/client/src nublic-files-and-users-client
            build_deb_package filewatcher/internal/src nublic-file-watcher-internal
            build_deb_package filewatcher/previewer/src nublic-file-watcher
            # build_deb_package filewatcher/main/src nublic-filewatcher
            build_deb_package python/client/src python-nublic
            build_deb_package python/server/src python-nublic-server
        fi

        #if in_list $thing "all base base_java" # Binding not needed anymore
        #then
            #build_gwt_package resource/java libnublic-resource-java
            #package_and_install resource/java
            #build_gwt_package notification/java libnublic-notification-java
            #package_and_install notification/java
            #build_gwt_package files_and_users/java libnublic-files-and-users-java
            #package_and_install files_and_users/java
            #build_gwt_package filewatcher/scala lib-nublic-filewatcher-scala
            #install_in_maven_repo filewatcher/scala/target/*jar-with-dependencies.jar com.nublic filewatcher.scala 0.0.1-SNAPSHOT
        #fi

        if in_list $thing "all gwt gwt_base"
        then
            package_and_install apps/util/gwt
            #package_and_install apps/util/ws-json
        fi

        # Manager App
        if in_list $thing "all fast server app_manager app_manager_server"
        then
            build_deb_package apps/app.manager/server-python/src nublic-app-manager-server
        fi

        if in_list $thing "all fast gwt app_manager app_manager_gwt"
        then
            build_gwt_package apps/app.manager/web nublic-app-manager-web
            build_gwt_package apps/app.manager/welcome nublic-app-manager-welcome
            build_gwt_package apps/app.manager/settings nublic-app-manager-settings
        fi

        if in_list $thing "all fast app_manager"
        then
            build_deb_package apps/app.manager nublic-app-manager
        fi

        # Browser App
        if in_list $thing "all fast server app_browser app_browser_server"
        then
            build_deb_package apps/app.browser/server-python/src nublic-app-browser-server
        fi

        if in_list $thing "all fast gwt app_browser app_browser_gwt"
        then
            build_gwt_package apps/app.browser/web nublic-app-browser-web
        fi

        if in_list $thing "all fast app_browser"
        then
            build_deb_package apps/app.browser nublic-app-browser
        fi

        # Music App
        if in_list $thing "all fast server app_music app_music_server"
        then
            build_deb_package apps/app.music/server-python/src nublic-app-music-server
            build_deb_package apps/app.music/fs/src nublic-app-music-fs
        fi

        if in_list $thing "all fast gwt app_music app_music_gwt"
        then
            build_gwt_package apps/app.music/web nublic-app-music-web
        fi

        if in_list $thing "all fast app_music"
        then
            build_deb_package apps/app.music nublic-app-music
        fi

        # Photos App
        if in_list $thing "all fast server app_photos app_photos_server"
        then
            build_deb_package apps/app.photos/server-common/src nublic-app-photos-server-common
            build_deb_package apps/app.photos/server-python/src nublic-app-photos-server
        fi

        if in_list $thing "all gwt app_photos app_photos_gwt"
        then
            package_and_install apps/app.photos/common
        fi

        if in_list $thing "all fast gwt app_photos app_photos_gwt"
        then
            build_gwt_package apps/app.photos/web nublic-app-photos-web
            build_gwt_package apps/app.photos/mobile nublic-app-photos-mobile
        fi

        if in_list $thing "all fast app_photos"
        then
            build_deb_package apps/app.photos nublic-app-photos
        fi

         # Downloads App
#        if in_list $thing "all fast server app_downloads app_downloads_server"
#        then
#            build_deb_package apps/app.downloads/server nublic-app-downloads-server
#        fi

#        if in_list $thing "all fast gwt app_downloads app_downloads_gwt"
#        then
#            build_gwt_package apps/app.downloads/web nublic-app-downloads-web
#        fi

#        if in_list $thing "all fast app_downloads"
#        then
#            build_deb_package apps/app.downloads nublic-app-downloads
#        fi

        # House App
        if in_list $thing "all fast app_house"
        then
            build_deb_package apps/app.house nublic-app-house
        fi

        # Market App
        if in_list $thing "all fast server app_market app_market_server"
        then
            build_deb_package apps/app.market/daemon/src nublic-app-market-daemon
            build_deb_package apps/app.market/server-python/src nublic-app-market-server
        fi

        if in_list $thing "all fast gwt app_market app_market_gwt"
        then
            build_gwt_package apps/app.market/web nublic-app-market-web
        fi

        if in_list $thing "all fast app_market"
        then
            build_deb_package apps/app.market nublic-app-market
        fi

        # Init App
        if in_list $thing "all fast server app_init app_init_server"
        then
            build_deb_package apps/app.init/server-python/src nublic-app-init-server
        fi

        if in_list $thing "all fast gwt app_init app_init_gwt"
        then
            build_gwt_package apps/app.init/web nublic-app-init-web
        fi

        if in_list $thing "all fast app_init"
        then
            build_deb_package apps/app.init nublic-app-init
        fi

        # Extra configuration packages
        if in_list $thing "all fast config"
        then
            build_deb_package conf/apache nublic-apache-config
            build_deb_package conf/samba nublic-samba-config
            build_deb_package conf/jetty8 nublic-jetty8-config
            build_deb_package conf/solr-jetty8 nublic-solr-jetty8-config
            #build_deb_package conf/solr nublic-solr-config
            #build_deb_package conf/tomcat6 nublic-tomcat-config
            #build_deb_package conf/tomcat7 nublic-tomcat-config
            build_deb_package conf/minidlna nublic-minidlna-config
            build_deb_package conf/upstart nublic-upstart
            build_deb_package conf/lshell nublic-lshell-config
            build_deb_package conf/openssh nublic-openssh-config
            build_deb_package conf/dyndnschecker nublic-dyndnschecker
            build_deb_package conf/unattended-upgrades nublic-unattended-upgrades-config
            build_deb_package conf/nublic nublic
        fi
    done

    # Create final repository
    create_repo

    for thing in $@
    do
        # Deploy
        if in_list $thing "deploy"
        then
            echo " "
            echo "DEPLOYING TO VAGRANT"
            vagrant ssh --command "/opt/code/manage_vagrant.sh reload_nublic"
        fi

        if in_list $thing "test"
        then
            echo " "
            echo "TESTING"
            vagrant ssh --command "/opt/code/manage_vagrant.sh test"
        fi

        if in_list $thing "notify fast deploy"
        then
            notify-send "Nublic build ended with tasks: $*"
        fi
    done
}

if [ $# = 0 ]
then
    do_build all
else
    do_build $*
fi

exit 0

