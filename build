#!/bin/bash

# For .deb packages
export DEBFULLNAME='Nublic Packaging Team'
export DEBEMAIL='packaging@nublic.com'
export DEBKEY=4EEA5986
export DEBREVISION=`date +%F-%H-%M`
export INITIAL_TIME=`date +%s`

# Used directories
export INITIAL_DIR=`pwd`
export TARGET_DIR="${INITIAL_DIR}/target"
export REPO_DIR="${TARGET_DIR}/repo"
export MAVEN_REPO_DIR="${TARGET_DIR}/temp/maven"
export MAVEN_CONFIG_FILE="${INITIAL_DIR}/conf/maven/settings.xml"
export MAVEN="mvn --settings \"${MAVEN_CONFIG_FILE}\" -Dmaven.test.skip"
export DEBUILD="debuild -d -eMAVEN -eMAVEN_REPO_DIR -eMAVEN_OPTS"
export MAVEN_OPTS="-XX:PermSize=1024m -XX:MaxPermSize=1024m"

# Make sure you have libdbus-java maven2 and reprepro installed
# You need to install maven3!! It's not in the repository and needs to be manually installed
# sudo apt-get install libdbus-java maven2 reprepro dpkg-sig libterm-readkey-perl cdbs python-all python-setuptools libtag1-dev ffmpeg libboost1.42-dev zlib1g-dev scala dpkg-sig reprepro devscripts openjdk-7-jdk junit junit4 python-sphinx
# sudo update-java-alternatives -s java-1.7.0-\*

# Config options
export SHOULD_CLEAN_MAVEN=1 # 1 for running 'maven clean'

install_in_maven_repo() {
    ${MAVEN} install:install-file -Dfile=$1 -DgroupId=$2 \
        -DartifactId=$3 -Dversion=$4 -Dpackaging=jar
}

clean() {
    rm -rf "${REPO_DIR}"
    # Create build folders, if non existant
    mkdir -p "${TARGET_DIR}"
    mkdir -p "${REPO_DIR}"
    mkdir -p "${MAVEN_REPO_DIR}"
    # Delete previous builds
    rm -rf "${TARGET_DIR}"/*.{deb,build,changes}
}

initialize() {
    # Install libraries in maven repo
    install_in_maven_repo /usr/share/java/dbus.jar org.freedesktop dbus 2.8.1
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/jEN/json_simple-1.1.jar" jEN json-simple 1.1
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/jEN/jEN.jar" jEN jEN 4.x.o
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-dnd/gwt-dnd-3.1.2-2.jar" com.allen_sauer gwt-dnd 3.1.2-2
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-slider/gwt-slider-bar-1.0.jar" gwt-incubator gwt-slider-bar 1.0
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwt-comet/gwt-comet-1.2.3.jar" gwt-comet gwt-comet 1.2.3
    install_in_maven_repo "${INITIAL_DIR}/3rd-party-libs/gwtmobile/gwtmobile-1.1.jar" gwtmobile gwtmobile 1.1
    # Install key into user keychain
    gpg --import conf/keys/packaging.key
    gpg --import conf/keys/packaging.private.key
}

copy_and_touch() {
    echo
    echo "COPYING DEBS FROM " $1
    sleep 1
    cd "$1"
    for f in *.deb
    do
        cp $f "${TARGET_DIR}"
        touch "${TARGET_DIR}/$f"
    done
    cd "${INITIAL_DIR}"
}

package_and_install() {
    echo
    echo "PACKAGING AND INSTALLING IN MAVEN " $1
    cd "$1"
    ${MAVEN} clean
    ${MAVEN} install
    cd "${INITIAL_DIR}"
}

package_and_install_dev_mode() {
    echo
    echo "PACKAGING AND INSTALLING IN MAVEN " $1
    cd "$1"
    ${MAVEN} -Pdev-mode clean
    ${MAVEN} -Pdev-mode install
    cd "${INITIAL_DIR}"
}

build_deb_package() {  # $1 = directory, $2 = "gather_dependencies" -> try to gather dependencies
    echo
    echo "BUILDING .DEB FOR " $1
    cd "$1"
    # Try to run Maven clean
    if [ ${SHOULD_CLEAN_MAVEN} -eq 1 ]
    then
        ${MAVEN} clean
    fi
    # Add changelog entry
    dch -p -v ${DEBREVISION} Building on `date`
    ${DEBUILD} -i -us -uc -b
    exit=$?
    git checkout debian/changelog
    if [ $exit -ne 0 ]
    then
        dch -p -v ${DEBREVISION} Building on `date`
        ${DEBUILD} -i -us -uc -b
        exit=$?
        git checkout debian/changelog
        if [ $exit -ne 0 ]
        then
            echo "Error building package " $1
            exit 1
        fi
    fi
    ${DEBUILD} clean
    cd ..
    mv *.deb *.build *.changes "${TARGET_DIR}"
    cd "${INITIAL_DIR}"
}

build_submodule_lib() {
    echo
    echo "BUILDING EXTERNAL LIBRARY " $1
    cd 3rd-party-libs
    rm -rf "$1"/debian
    mkdir "$1"/debian
    cp -R "$1-debian"/* "$1"/debian
    cd "$1"
    ${DEBUILD} -i -us -uc -b
    exit=$?
    if [ $exit != 0 ]
    then
        echo "Error building submodule " $1
        exit 1
    fi
    ${DEBUILD} clean
    cd ..
    mv *.deb *.build *.changes *.dsc *.tar.gz "${TARGET_DIR}"
    rm -rf "$1"/debian
    cd "${INITIAL_DIR}"
}

create_repo() {
    echo
    echo "CREATING REPOSITORY"
    # Create repo structure
    mkdir -p "${REPO_DIR}/conf"
    mkdir -p "${REPO_DIR}/incoming"
    cp conf/repo/conf/distributions "${REPO_DIR}/conf"
    cd "${TARGET_DIR}"
    # Sign packages and add packages to repo
    for pkg in *.deb
    do
        DEB_DATE=`date -r ${pkg} +%s`
        if [ ${DEB_DATE} -gt ${INITIAL_TIME} ]
        then
            dpkg-sig -k ${DEBKEY} --verbose --sign builder $pkg
            reprepro --ignore=wrongdistribution -Vb repo includedeb precise $pkg
        fi
    done
    cd "${INITIAL_DIR}"
}

in_list() {
    for i in $2
    do
        if [ $1 = $i ]
        then
            return 0
        fi
    done
    return 1
}


do_build() {
    for thing in $@
    do
        # Clean previous builds
        if in_list $thing "all clean"
        then
            clean
        fi
        
        # Initialize build
        if in_list $thing "all initialize"
        then
            initialize
        fi

        if in_list $thing "all 3rd_party"
        then
            # Update submodule repositories
            git submodule update --init --merge
            git submodule foreach 'git pull origin master'

            # Third-party libraries
            cp ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen-Makefile ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/Makefile
            build_submodule_lib echoprint-codegen
            rm ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/Makefile ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/echoprint-codegen ${INITIAL_DIR}/3rd-party-libs/echoprint-codegen/src/libcodegen.so.4.1.1
            build_submodule_lib sunburnt
            build_submodule_lib pyechonest
            rm -r ${INITIAL_DIR}/3rd-party-libs/pyechonest/pyechonest.egg-info/
            copy_and_touch 3rd-party-libs/aria2
            copy_and_touch 3rd-party-libs/python-fstab
            copy_and_touch 3rd-party-libs/tomcat7
            copy_and_touch 3rd-party-libs/lucene-solr
            build_deb_package 3rd-party-libs/pykka
            build_deb_package 3rd-party-libs/rpcbd-0.6.0
            rm -r ${INITIAL_DIR}/3rd-party-libs/rpcbd-0.6.0/rpcbd.egg-info/
            build_deb_package 3rd-party-libs/flask-sqlalchemy
            # build_deb_package 3rd-party-libs/guava
        fi

        # bst-player fork
        if in_list $thing "all gwt bst_player"
        then
            package_and_install_dev_mode player
        fi

        if in_list $thing "all base base_python"
        then
            # Base modules
            build_deb_package resource/main/src
            build_deb_package notification/main/src
            build_deb_package files_and_users/main/src
            build_deb_package files_and_users/client/src
            build_deb_package filewatcher/internal/src
            build_deb_package python/client/src
            build_deb_package python/server/src
        fi
        
        if in_list $thing "all base base_java"
        then
            build_deb_package resource/java
            package_and_install resource/java
            build_deb_package notification/java
            package_and_install notification/java
            build_deb_package files_and_users/java
            package_and_install files_and_users/java
            build_deb_package filewatcher/scala
            install_in_maven_repo filewatcher/scala/target/*jar-with-dependencies.jar com.nublic filewatcher.scala 0.0.1-SNAPSHOT
        fi
        
        if in_list $thing "all gwt gwt_base"
        then
            package_and_install apps/util/gwt
            package_and_install apps/util/ws-json
        fi
        
        # Manager App
        if in_list $thing "all server app_manager app_manager_server"
        then
            build_deb_package apps/app.manager/server-python/src
        fi
        
        if in_list $thing "all gwt app_manager app_manager_gwt"
        then
            build_deb_package apps/app.manager/web
            build_deb_package apps/app.manager/welcome
            build_deb_package apps/app.manager/settings
        fi
        
        if in_list $thing "all app_manager"
        then
            build_deb_package apps/app.manager
        fi

        # Browser App
        if in_list $thing "all server app_browser app_browser_server"
        then
            build_deb_package apps/app.browser/server
        fi
            
        if in_list $thing "all gwt app_browser app_browser_gwt"
        then
            build_deb_package apps/app.browser/web
        fi
         
        if in_list $thing "all app_browser"
        then
            build_deb_package apps/app.browser
        fi

        # Music App
        if in_list $thing "all server app_music app_music_server"
        then
            build_deb_package apps/app.music/server-python/src
            build_deb_package apps/app.music/fs/src
        fi
        
        if in_list $thing "all gwt app_music app_music_gwt"
        then
            build_deb_package apps/app.music/web
        fi
        
        if in_list $thing "all app_music"
        then
            build_deb_package apps/app.music
        fi

        # Photos App
        if in_list $thing "all server app_photos app_photos_server"
        then
            build_deb_package apps/app.photos/server-python/src
        fi
        
        if in_list $thing "all gwt app_photos app_photos_gwt"
        then
            package_and_install apps/app.photos/common
            build_deb_package apps/app.photos/web
            build_deb_package apps/app.photos/mobile
        fi
        
        if in_list $thing "all app_photos"
        then
            build_deb_package apps/app.photos
        fi

         # Downloads App
        if in_list $thing "all server app_downloads app_downloads_server"
        then
            build_deb_package apps/app.downloads/server
        fi
        
        if in_list $thing "all gwt app_downloads app_downloads_gwt"
        then
            build_deb_package apps/app.downloads/web
        fi
        
        if in_list $thing "all app_downloads"
        then
            build_deb_package apps/app.downloads
        fi

        # Market App
        if in_list $thing "all server app_market app_market_server"
        then
            build_deb_package apps/app.market/daemon/src
            build_deb_package apps/app.market/server-python/src
        fi
        
        if in_list $thing "all gwt app_market app_market_gwt"
        then
            build_deb_package apps/app.market/web
        fi
            
        if in_list $thing "all app_market"
        then
            build_deb_package apps/app.market
        fi

        # Init App
        if in_list $thing "all server app_init app_init_server"
        then
            build_deb_package apps/app.init/server-python/src
        fi
        
        if in_list $thing "all gwt app_init app_init_gwt"
        then
            build_deb_package apps/app.init/web
        fi
        
        if in_list $thing "all app_init"
        then
            build_deb_package apps/app.init
        fi

        # Extra configuration packages
        if in_list $thing "all config"
        then
            build_deb_package conf/apache
            build_deb_package conf/samba
            build_deb_package conf/solr
            build_deb_package conf/tomcat6
            build_deb_package conf/tomcat7
            build_deb_package conf/minidlna
            build_deb_package conf/upstart
            build_deb_package conf/lshell
            build_deb_package conf/openssh
            build_deb_package conf/dyndnschecker
            build_deb_package conf/unattended-upgrades
            build_deb_package conf/nublic
        fi
    done
    
    # Create final repository
    create_repo
}

if [ $# = 0 ]
then
    do_build all
else
    do_build $*
fi

exit 0

